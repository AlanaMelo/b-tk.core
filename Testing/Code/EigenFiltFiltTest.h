#ifndef EigenFiltFiltTest_h
#define EigenFiltFiltTest_h

#include <btkEigen/SignalProcessing/FiltFilt.h>
#include <btkEigen/SignalProcessing/IIRFilterDesign.h>
#include <btkConvert.h>

#include "EigenFilt_Util.h"

CXXTEST_SUITE(EigenFiltFiltTest)
{
  CXXTEST_TEST(Butterworth_LowPass_2_0Dot5)
  {
    Eigen::Matrix<double,Eigen::Dynamic,1> x;
    generateRawData(x);
    Eigen::Matrix<double,Eigen::Dynamic,1> a,b;
    btkEigen::butter(&b, &a, 2, 0.5);
    Eigen::Matrix<double,Eigen::Dynamic,1> y = btkEigen::filtfilt(b, a, x);
    
    // Note: the data in the 'result' variable were computed with a different algorithm than the one implemented in BTK.
    Eigen::Matrix<double,Eigen::Dynamic,1> result(81,1);
    result << 0.269798891254315, 0.548893273936043, 0.859470031283581, 1.083314451319253, 1.181526336501076, 1.257304313666979, 1.276759551809656, 1.068465704696009, 0.685668156305006, 0.372268495814636, 
              0.157220415283078,-0.104162709960200,-0.411133031729557,-0.666435823989357,-0.821984136929495,-0.833236901328857,-0.709580252798482,-0.542015408017795,-0.372916081515782,-0.174340534581690, 
              0.072920410968047, 0.380822922154266, 0.767727734946687, 1.120370101251430, 1.245206330432570, 1.175867152632213, 1.092613558545766, 1.006391390249807, 0.809008427785796, 0.500882870473192,
              0.177427442323182,-0.115265050765107,-0.399394457537441,-0.683974764754652,-0.867972546429597,-0.841912916291380,-0.686986990511049,-0.548614709893092,-0.431855109908579,-0.225316251342442,
              0.149990554410562, 0.548991274928445, 0.766603662161258, 0.897492808926710, 1.119235616431332, 1.308820691731916, 1.244650590294634, 0.982001470310733, 0.740054381757683, 0.537145589228529,
              0.241231226499049,-0.153720986008040,-0.506910201501367,-0.663739279012461,-0.656372165803181,-0.667496462570363,-0.676804487342212,-0.520053642587747,-0.227506579633197, 0.073377651136435, 
              0.334500818135176, 0.537846810887783, 0.716580939359015, 0.908624646571194, 1.038847705160293, 1.081244298319416, 1.110278804941418, 1.053114775703411, 0.816052544461935, 0.519935281836539,
              0.261179617911776,-0.018178988662816,-0.328756149855888,-0.622570989208225,-0.849673221482816,-0.901019340312481,-0.760265237435191,-0.571478064861968,-0.381544623107748,-0.141512050095412,
              0.126109968176025;
    
    TS_ASSERT_EQUALS(x.rows(), y.rows());
    TS_ASSERT_EQUALS(x.cols(), y.cols());
    for (int i = 0 ; i < x.rows() ; ++i)
      TSM_ASSERT_DELTA("Sample #" + btk::ToString(i), y.coeff(i), result.coeff(i), 5e-15); // Sample #74 doesn't pass the 1e-15 accuracy
  };
  
  CXXTEST_TEST(Butterworth_LowPass_7_0Dot4)
  {
    Eigen::Matrix<double,Eigen::Dynamic,1> x;
    generateRawData(x);
    Eigen::Matrix<double,Eigen::Dynamic,1> a,b;
    btkEigen::butter(&b, &a, 7, 0.4);
    Eigen::Matrix<double,Eigen::Dynamic,1> y = btkEigen::filtfilt(b, a, x);
    
    // Note: the data in the 'result' variable were computed with a different algorithm than the one implemented in BTK.
    Eigen::Matrix<double,Eigen::Dynamic,1> result(81,1);
    result << 0.269224198995365, 0.576244844891377, 0.841047794985662, 1.051995960896665, 1.212111883898300, 1.294908320869989, 1.243866016500979, 1.033629026285214, 0.719179022882040, 0.399382497299564, 
              0.127932072638959,-0.121258223148020,-0.390804362682516,-0.657304120320415,-0.831609306644179,-0.843293620017637, -0.712549898485055,-0.529036301998747,-0.360748067274338,-0.190361216247611,
              0.053347648952137, 0.401417302063049, 0.787555567463439, 1.090074745480490, 1.228940660982778, 1.215991998981691, 1.114686623121020, 0.968446370750735, 0.777129373378568, 0.526670672267367, 
              0.219499035562998,-0.120036382087887,-0.447100626602707,-0.699361700915987,-0.823207735761345, -0.814721264794714,-0.722096588753804,-0.590551496751037,-0.414688555193363,-0.164553676607189, 
              0.150375976153217, 0.471982978120317, 0.750129529922342, 0.977292533968083, 1.152390006271393, 1.240240161208414, 1.198919420272117, 1.034279429003080, 0.794108089568890, 0.511288333138874, 
              0.187671284807061,-0.157001067998262,-0.455439925580662,-0.640566143770464,-0.707277695676099,-0.698482283199390,-0.635717283921607,-0.493799769779159,-0.252431539275415, 0.050937965124214, 
              0.339723617914652, 0.563249498589249, 0.729730708532069, 0.876377096262877, 1.016818678478446, 1.119098490061520, 1.129646406510832, 1.018682400148089, 0.806334782897612, 0.543803793466131,
              0.267131175629460,-0.024386300271966,-0.336456307657096,-0.632556662982100,-0.835389016593736,-0.884215372399933,-0.784026327097787,-0.591847281576759,-0.363022441619061,-0.121385501896644, 
              0.127102732446800;
    
    TS_ASSERT_EQUALS(x.rows(), y.rows());
    TS_ASSERT_EQUALS(x.cols(), y.cols());
    for (int i = 0 ; i < x.rows() ; ++i)
      TSM_ASSERT_DELTA("Sample #" + btk::ToString(i), y.coeff(i), result.coeff(i), 5e-14); // Few samples doesn't pass the 1e-14 accuracy.
  };
};

CXXTEST_SUITE_REGISTRATION(EigenFiltFiltTest)
CXXTEST_TEST_REGISTRATION(EigenFiltFiltTest, Butterworth_LowPass_2_0Dot5)
CXXTEST_TEST_REGISTRATION(EigenFiltFiltTest, Butterworth_LowPass_7_0Dot4)

#endif // EigenFiltFiltTest_h